footer {
  
  background-color: darken($brand-primary,7.6%);
  color: #fff;
  min-width: 320px;
  width: 100%;

  .footer-links{
    padding-top: 50px;
    padding-bottom: 50px;
  }

  // panel into footer
  div {

    > .panel {
      background-color:transparent;
      border: 0;
      border-radius: 0;
      margin-bottom: 0;
      padding-right: 30px;
      @media (max-width: $screen-xs-max) {
        padding-right:0;
      }

    }

    &:last-child{
      > .panel{
        padding-right: 0;
      }
    }
  }

  // Panel contents
  .panel-body {
    padding: 0;

    > ul > li {
      padding:10px 0;
      cursor: pointer;
      > a {
        color: #fff;
        &:hover{
          text-decoration:underline;
        }
      }
      &:first-child {
        padding-top: 10px;
      }
    }

    @include clearfix();
    
  }

  // Optional heading
  .panel-default .panel-heading {
    cursor: pointer;
    background-color: transparent;
    padding: 10px 0px 20px 0px;
    margin-bottom: 14px;
    border-radius: 0;
  }

  // Within heading, strip any `h*` tag of it's default margins for spacing.
  .panel-title {
    margin-top: 0;
    margin-bottom: 0;
    font-size: ceil(($font-size-base * 1.125));
    font-weight: 500;
    > a {
      color: inherit;
    }
    [class*="icon-arrow"]{
      padding-top: 5px;
    }
  }

  // Contextual variations
  .panel-default {
    @include panel-variant(darken($brand-primary,7.5%), #fff, transparent, darken($brand-primary, 15%));

    // Optional dropdown
    @media (max-width: $screen-xs-max) {
      .panel-heading{
        &:hover{
          background-color: lighten($brand-primary, 7.6%);
        }
        a:hover{
          text-decoration: none;
        }
      }
      .panel-heading{ 
        margin-bottom: 0;
        padding-left: 15px; 
        padding-right: 15px;
        padding-bottom: 10px;
      }
      .panel-body {
        > ul > li {
          padding-left:15px;
          padding-right:15px;
          border-bottom: 1px solid darken($brand-primary,15%);
          > a {
            &:hover{
              text-decoration:none;
            }
          }
          &:hover{
            background-color: lighten($brand-primary, 5%);
          }
        }
      }
    }
  }



  @media (max-width: $screen-xs-max) {
    .panel-default > [data-target*="#col"] {
      background-color: $brand-primary;
    }
    .footer-links{
      padding-top: 0px;
      padding-bottom: 0px;
    }
  }
  






  // media object
  .social-block {
    padding:20px 0 10px 0;
    background-color: lighten($brand-primary, 7.6%);
    .media {

      margin:0 0 10px 0;

      [class*="facebook"]{
        background-color: $facebook-blue;
        color: $brand-white;
        display: block;
        height: 30px;
        line-height: 2px;
        padding: 13px;
        width: 30px;
        border-radius: $border-radius-base;
      }
      [class*="youtube"]{
        background-color: $youtube-red;
        color: $brand-white;
        display: block;
        height: 30px;
        line-height: 2px;
        padding: 13px 0 0 0;
        width: 30px;
        border-radius: $border-radius-base;
      }
      [class*="twitter"]{
        background-color: $twitter-blue;
        color: $brand-white;
        display: block;
        height: 30px;
        line-height: 2px;
        padding: 13px 0 0 0;
        width: 30px;
        border-radius: $border-radius-base;
      }
      [class*="google-plus"]{
        background-color: $google-plus-red;
        color: $brand-white;
        display: block;
        height: 30px;
        line-height: 2px;
        padding: 13px 0 0 0;
        width: 30px;
        border-radius: $border-radius-base;
      }
    }

    @media (max-width: $screen-xs-max) {
      padding-top:10px;

      .media{
        padding:10px 0 10px 0;
        margin: 0px;
      }
      
    }

  }

  .copyright{
    background-color: $body-bg;
    color: #333333;
    padding: 15px;
  }

  /* test */
  

}

.container-no-gutter {
  @include container-fixed();
  
  padding-left:0; 
  padding-right:0;
  overflow: hidden;
  // mobile first defaults
  .row {
    @include make-row-reset-gutter();
  }

  @include make-grid-columns();

  @include make-grid-columns-float(xs);
  @include make-grid($grid-columns, xs, width);
  @include make-grid($grid-columns, xs, pull);
  @include make-grid($grid-columns, xs, push);
  @include make-grid($grid-columns, xs, offset);
  @include reset-gutter($grid-columns, xs);

  @media (min-width: $screen-sm-min) {

    padding-left:  ($grid-gutter-width / 2);
    padding-right: ($grid-gutter-width / 2);
    width: $full-width; //$container-sm;
    @include make-grid-columns-float(sm);
    @include make-grid($grid-columns, sm, width);
    @include make-grid($grid-columns, sm, pull);
    @include make-grid($grid-columns, sm, push);
    @include make-grid($grid-columns, sm, offset);
    @include reset-gutter($grid-columns, sm);
  }

  @media (min-width: $screen-md-min) {

    padding-left:  ($grid-gutter-width / 2);
    padding-right: ($grid-gutter-width / 2);
    width: $container-md;

    @include make-grid-columns-float(md);
    @include make-grid($grid-columns, md, width);
    @include make-grid($grid-columns, md, pull);
    @include make-grid($grid-columns, md, push);
    @include make-grid($grid-columns, md, offset);
    @include reset-gutter($grid-columns, md);
  }

  @media (min-width: $screen-lg-min) {
    
    padding-left:  ($grid-gutter-width / 2);
    padding-right: ($grid-gutter-width / 2);
    width: $container-lg;

    @include make-grid-columns-float(lg);
    @include make-grid($grid-columns, lg, width);
    @include make-grid($grid-columns, lg, pull);
    @include make-grid($grid-columns, lg, push);
    @include make-grid($grid-columns, lg, offset);
    @include reset-gutter($grid-columns, lg);
  }

  @media (min-width: $screen-extra-lg) {
    
    padding-left:  ($grid-gutter-width / 2);
    padding-right: ($grid-gutter-width / 2);
    width: $container-extra-large-desktop;

    @include make-grid-columns-float(lg);
    @include make-grid($grid-columns, lg, width);
    @include make-grid($grid-columns, lg, pull);
    @include make-grid($grid-columns, lg, push);
    @include make-grid($grid-columns, lg, offset);
    @include reset-gutter(12, lg);
  }

}



/*.container-no-gutter{

  @include container-fixed();
  .row{
    @include make-row();
  }
  .left-and-right {
    .left {
      @include make-xs-column(6);
    }
    .right {
      @include make-xs-column(6);
    }

  }

}*/

